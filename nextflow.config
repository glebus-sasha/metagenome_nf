// Define general pipeline parameters
params.reports = true
params.cpus = 1
params.memory = 8.GB

// Define default branch for the pipeline
manifest.defaultBranch  = 'main'              // https://github.com/nextflow-io/nextflow/issues/3593

// Define profiles for different environments
profiles {
    sesana {
        params.cpus = 64
        params.memory = 252.GB
        cleanup                 = true                                                                      // Cleanup intermediate files
        process {
            cpus = 1
            memory = 2.GB
            withName: 'KRAKEN2' {
                cpus = 10
                memory = 100.GB
                maxForks = 1
            }
            withName: 'ALIGN|MEGAHIT|CHECKM' {
                cpus = 2
            }
            withName: 'CHECKM' {
                cpus = 10
                memory = 80.GB
                maxForks = 6
            }
}
    }
    test {
        params.outdir           = "/root/aglebus/results"                                                   // Output directory for results
        params.reads            = "/root/aglebus/data"                                                      // Reads files
        params.kraken2_db       = "/home/aglebus/kraken2_db"                                                // Data base for kraken2
        params.gtdbtk_db        = "/home/aglebus/GTDB_db/release220"                                        // Data base for GTDB-TK
        cleanup                 = false
        params.reads            = "./data"
        params.outdir           = "/root/aglebus/output"
    }
    // Docker environment configuration
    docker {
        docker.enabled         = true
    }
    // Singularity environment configuration
    singularity {
        singularity.enabled    = true
    }
    // Apptainer environment configuration
    apptainer {
        apptainer.enabled      = true
    }
}

// Configuration for generating pipeline reports if enabled
if (params.reports) {
    def trace_timestamp     = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')                                  // Define trace timestamp
    dag.enabled             = true
    dag.file                = "pipeline_info/${trace_timestamp}/${trace_timestamp}-dag.html"                      // DAG visualization file
    report.enabled          = true
    report.file             = "pipeline_info/${trace_timestamp}/${trace_timestamp}-report.html"                   // Report file
    timeline.enabled        = true
    timeline.file           = "pipeline_info/${trace_timestamp}/${trace_timestamp}-timeline.html"                 // Timeline file
    trace.enabled           = true
    trace.file              = "pipeline_info/${trace_timestamp}/${trace_timestamp}-trace.txt"                     // Trace file
}