// Define general pipeline parameters
params.outdir           = "../results"        // Output directory for results
params.cpus             = 1                   // Number of CPUs to use
params.memory           = 4                   // Amount of memory (GB) to use
params.reports          = true               // Generate pipeline reports

// Define default branch for the pipeline
manifest.defaultBranch  = 'main'              // https://github.com/nextflow-io/nextflow/issues/3593

// Configuration for generating pipeline reports if enabled
if (params.reports) {
    def trace_timestamp     = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')                                // Define trace timestamp
    dag.enabled             = true
    dag.file                = "${params.outdir}/pipeline_info/${trace_timestamp}-dag.html"                      // DAG visualization file
    report.enabled          = true
    report.file             = "${params.outdir}/pipeline_info/${trace_timestamp}-report.html"                   // Report file
    timeline.enabled        = true
    timeline.file           = "${params.outdir}/pipeline_info/${trace_timestamp}-timeline.html"                 // Timeline file
    trace.enabled           = true
    trace.file              = "${params.outdir}/pipeline_info/${trace_timestamp}-trace.txt"                     // Trace file
}

// Define profiles for different environments
profiles {
    // Local profile configuration
    local {
        params.outdir           = "../results"                                                              // Output directory for results
        params.reads            = "/storage/aglebus/meta/data"                                              // Reads files
        params.kraken2_db       = "/storage/aglebus/meta/kraken2_db"                                        // Data base for kraken2
        params.gtdbtk_db        = "/storage/aglebus/meta/GTDB_db/release220"                                // Data base for GTDB-TK
        params.cpus             = 10                                                                        // CPUs for local profile
        params.memory           = 15                                                                        // Memory (GB) for local profile
    }
    // Server profile configuration
    server {
        params.outdir           = "/storage/aglebus/meta/results"                                           // Output directory for results
        params.reads            = "/storage/aglebus/meta/data"                                              // Reads files
        params.kraken2_db       = "/storage/aglebus/meta/kraken2_db"                                        // Data base for kraken2
        params.gtdbtk_db        = "/storage/aglebus/meta/GTDB_db/release220"                                // Data base for GTDB-TK
        params.cpus             = 96                                                                        // CPUs for server profile
        params.memory           = "600 GB"                                                                  // Memory (GB) for server profile
    }
    // Server profile configuration
    server_rpz {
        params.outdir           = "/storage/aglebus/meta/results"                                           // Output directory for results
        params.reads            = "/storage/aglebus/meta/data"                                              // Reads files
        params.kraken2_db       = "/storage/aglebus/meta/kraken2_db"                                        // Data base for kraken2
        params.gtdbtk_db        = "/storage/aglebus/meta/GTDB_db/release220"                                // Data base for GTDB-TK
        params.cpus             = 30                                                                        // CPUs for server profile
        params.memory           = "300 GB"                                                                  // Memory (GB) for server profile
        cleanup                 = true                                                                      // Do not cleanup intermediate files
        publishDir_mode         = 'copy'                                                                    // The default mode of publishing results (see https://www.nextflow.io/docs/latest/process.html#publishdir)
    }
    sesana {
        params.outdir           = "/home/aglebus/results"                                                   // Output directory for results
        params.reads            = "/home/aglebus/data"                                                      // Reads files
        params.kraken2_db       = "/home/aglebus/kraken2_db"                                                // Data base for kraken2
        params.gtdbtk_db        = "/home/aglebus/GTDB_db/release220"                                        // Data base for GTDB-TK
        params.cpus             = 64                                                                        // CPUs for server profile
        params.memory           = "250 GB"                                                                  // Memory (GB) for server profile
        cleanup                 = true                                                                      // Do not cleanup intermediate files
        publishDir_mode         = 'copy'                                                                    // The default mode of publishing results (see https://www.nextflow.io/docs/latest/process.html#publishdir)
        process {
            cpus = 1
            memory = 2.GB
            withName: 'KRAKEN2' {
                cpus = 32
                memory = 100.GB
            }
}
    }
    test {
        cleanup                 = false
        params.reads            = "./data"
        publishDir_mode         = 'link'
    }
    // Docker environment configuration
    docker {
        docker.enabled         = true
    }
    // Singularity environment configuration
    singularity {
        singularity.enabled    = true
    }
    // Apptainer environment configuration
    apptainer {
        apptainer.enabled      = true
    }
}
